// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mqV4UcDB7VtiJ8cJsjEuAy
// Component: 3tVaCsuA_u6n

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuButton from "../../MenuButton"; // plasmic-import: YrxonNUcRkzv/component

import { useScreenVariants as useScreenVariantslHlE6P37P8G4 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: LHlE6P37P8G4/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_build_systems_webseite.module.css"; // plasmic-import: mqV4UcDB7VtiJ8cJsjEuAy/projectcss
import sty from "./PlasmicMenu.module.css"; // plasmic-import: 3tVaCsuA_u6n/css

import Menu1SvgrepoComsvgIcon from "./icons/PlasmicIcon__Menu1SvgrepoComsvg"; // plasmic-import: pbY94RXcJ76R/icon
import LineXlSvgrepoComsvgIcon from "./icons/PlasmicIcon__LineXlSvgrepoComsvg"; // plasmic-import: ek0KpRnEU1Kn/icon

createPlasmicElementProxy;

export type PlasmicMenu__VariantMembers = {
  onSubSite: "services" | "projekte" | "personen";
  expand: "expand";
};
export type PlasmicMenu__VariantsArgs = {
  onSubSite?: MultiChoiceArg<"services" | "projekte" | "personen">;
  expand?: SingleBooleanChoiceArg<"expand">;
};
type VariantPropType = keyof PlasmicMenu__VariantsArgs;
export const PlasmicMenu__VariantProps = new Array<VariantPropType>(
  "onSubSite",
  "expand"
);

export type PlasmicMenu__ArgsType = {};
type ArgPropType = keyof PlasmicMenu__ArgsType;
export const PlasmicMenu__ArgProps = new Array<ArgPropType>();

export type PlasmicMenu__OverridesType = {
  root?: p.Flex<"div">;
  start?: p.Flex<typeof MenuButton>;
  services?: p.Flex<typeof MenuButton>;
  projekte?: p.Flex<typeof MenuButton>;
  personen?: p.Flex<typeof MenuButton>;
  text?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultMenuProps {
  onSubSite?: MultiChoiceArg<"services" | "projekte" | "personen">;
  expand?: SingleBooleanChoiceArg<"expand">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenu__RenderFunc(props: {
  variants: PlasmicMenu__VariantsArgs;
  args: PlasmicMenu__ArgsType;
  overrides: PlasmicMenu__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "onSubSite",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.onSubSite
      },
      {
        path: "expand",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.expand
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantslHlE6P37P8G4()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootexpand]: hasVariant($state, "expand", "expand"),
          [sty.rootonSubSite_personen]: hasVariant(
            $state,
            "onSubSite",
            "personen"
          ),
          [sty.rootonSubSite_projekte]: hasVariant(
            $state,
            "onSubSite",
            "projekte"
          ),
          [sty.rootonSubSite_projekte_onSubSite_personen]:
            hasVariant($state, "onSubSite", "projekte") &&
            hasVariant($state, "onSubSite", "personen"),
          [sty.rootonSubSite_projekte_onSubSite_services]:
            hasVariant($state, "onSubSite", "services") &&
            hasVariant($state, "onSubSite", "projekte"),
          [sty.rootonSubSite_projekte_onSubSite_services_onSubSite_personen]:
            hasVariant($state, "onSubSite", "services") &&
            hasVariant($state, "onSubSite", "projekte") &&
            hasVariant($state, "onSubSite", "personen"),
          [sty.rootonSubSite_services]: hasVariant(
            $state,
            "onSubSite",
            "services"
          ),
          [sty.rootonSubSite_services_expand]:
            hasVariant($state, "expand", "expand") &&
            hasVariant($state, "onSubSite", "services"),
          [sty.rootonSubSite_services_onSubSite_personen]:
            hasVariant($state, "onSubSite", "services") &&
            hasVariant($state, "onSubSite", "personen")
        }
      )}
      onMouseLeave={async event => {
        const $steps = {};

        $steps["updateExpand"] = true
          ? (() => {
              const actionArgs = { vgroup: "expand", operation: 6 };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                p.set($state, vgroup, false);
                return false;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateExpand"] != null &&
          typeof $steps["updateExpand"] === "object" &&
          typeof $steps["updateExpand"].then === "function"
        ) {
          $steps["updateExpand"] = await $steps["updateExpand"];
        }
      }}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__vsgcl, {
          [sty.freeBoxexpand__vsgclQrxaM]: hasVariant(
            $state,
            "expand",
            "expand"
          ),
          [sty.freeBoxonSubSite_personen__vsgcluVgFv]: hasVariant(
            $state,
            "onSubSite",
            "personen"
          ),
          [sty.freeBoxonSubSite_projekte__vsgclJBaP]: hasVariant(
            $state,
            "onSubSite",
            "projekte"
          ),
          [sty.freeBoxonSubSite_services__vsgclPxlp4]: hasVariant(
            $state,
            "onSubSite",
            "services"
          )
        })}
      >
        <p.PlasmicLink
          className={classNames(projectcss.all, projectcss.a, sty.link__c0Hxb, {
            [sty.linkexpand__c0HxbQrxaM]: hasVariant(
              $state,
              "expand",
              "expand"
            ),
            [sty.linkonSubSite_personen__c0HxbuVgFv]: hasVariant(
              $state,
              "onSubSite",
              "personen"
            ),
            [sty.linkonSubSite_projekte__c0HxbJBaP]: hasVariant(
              $state,
              "onSubSite",
              "projekte"
            ),
            [sty.linkonSubSite_projekte_onSubSite_personen__c0HxbJBaPUVgFv]:
              hasVariant($state, "onSubSite", "projekte") &&
              hasVariant($state, "onSubSite", "personen"),
            [sty.linkonSubSite_services__c0HxbPxlp4]: hasVariant(
              $state,
              "onSubSite",
              "services"
            )
          })}
          component={Link}
          onClick={async event => {
            const $steps = {};

            $steps["updateExpand"] = true
              ? (() => {
                  const actionArgs = { vgroup: "expand", operation: 2 };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    const oldValue = p.get($state, vgroup);
                    p.set($state, vgroup, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateExpand"] != null &&
              typeof $steps["updateExpand"] === "object" &&
              typeof $steps["updateExpand"].then === "function"
            ) {
              $steps["updateExpand"] = await $steps["updateExpand"];
            }

            $steps["goToHomepage2"] = true
              ? (() => {
                  const actionArgs = { destination: `/` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToHomepage2"] != null &&
              typeof $steps["goToHomepage2"] === "object" &&
              typeof $steps["goToHomepage2"].then === "function"
            ) {
              $steps["goToHomepage2"] = await $steps["goToHomepage2"];
            }
          }}
          platform={"nextjs"}
        >
          <MenuButton
            data-plasmic-name={"start"}
            data-plasmic-override={overrides.start}
            className={classNames("__wab_instance", sty.start, {
              [sty.startexpand]: hasVariant($state, "expand", "expand"),
              [sty.startonSubSite_personen]: hasVariant(
                $state,
                "onSubSite",
                "personen"
              ),
              [sty.startonSubSite_projekte]: hasVariant(
                $state,
                "onSubSite",
                "projekte"
              ),
              [sty.startonSubSite_services]: hasVariant(
                $state,
                "onSubSite",
                "services"
              )
            })}
          >
            {hasVariant($state, "expand", "expand") &&
            hasVariant(globalVariants, "screen", "iPhone")
              ? "Start"
              : hasVariant($state, "expand", "expand") &&
                hasVariant(globalVariants, "screen", "desktopNormal")
              ? "Start"
              : hasVariant($state, "expand", "expand")
              ? "Start"
              : "Start"}
          </MenuButton>
        </p.PlasmicLink>
        <p.PlasmicLink
          className={classNames(projectcss.all, projectcss.a, sty.link__bqBb5, {
            [sty.linkexpand__bqBb5QrxaM]: hasVariant(
              $state,
              "expand",
              "expand"
            ),
            [sty.linkonSubSite_personen__bqBb5UVgFv]: hasVariant(
              $state,
              "onSubSite",
              "personen"
            ),
            [sty.linkonSubSite_projekte__bqBb5JBaP]: hasVariant(
              $state,
              "onSubSite",
              "projekte"
            ),
            [sty.linkonSubSite_projekte_onSubSite_services__bqBb5JBaPPxlp4]:
              hasVariant($state, "onSubSite", "services") &&
              hasVariant($state, "onSubSite", "projekte"),
            [sty.linkonSubSite_services__bqBb5Pxlp4]: hasVariant(
              $state,
              "onSubSite",
              "services"
            )
          })}
          component={Link}
          onClick={async event => {
            const $steps = {};

            $steps["updateExpand"] = true
              ? (() => {
                  const actionArgs = { vgroup: "expand", operation: 2 };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    const oldValue = p.get($state, vgroup);
                    p.set($state, vgroup, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateExpand"] != null &&
              typeof $steps["updateExpand"] === "object" &&
              typeof $steps["updateExpand"].then === "function"
            ) {
              $steps["updateExpand"] = await $steps["updateExpand"];
            }

            $steps["goToServices"] = true
              ? (() => {
                  const actionArgs = { destination: `/services` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToServices"] != null &&
              typeof $steps["goToServices"] === "object" &&
              typeof $steps["goToServices"].then === "function"
            ) {
              $steps["goToServices"] = await $steps["goToServices"];
            }
          }}
          platform={"nextjs"}
        >
          <MenuButton
            data-plasmic-name={"services"}
            data-plasmic-override={overrides.services}
            className={classNames("__wab_instance", sty.services, {
              [sty.servicesexpand]: hasVariant($state, "expand", "expand"),
              [sty.servicesonSubSite_personen]: hasVariant(
                $state,
                "onSubSite",
                "personen"
              ),
              [sty.servicesonSubSite_projekte]: hasVariant(
                $state,
                "onSubSite",
                "projekte"
              ),
              [sty.servicesonSubSite_projekte_onSubSite_personen]:
                hasVariant($state, "onSubSite", "personen") &&
                hasVariant($state, "onSubSite", "projekte"),
              [sty.servicesonSubSite_services]: hasVariant(
                $state,
                "onSubSite",
                "services"
              )
            })}
          >
            {"Services"}
          </MenuButton>
        </p.PlasmicLink>
        <p.PlasmicLink
          className={classNames(projectcss.all, projectcss.a, sty.link__kVWuz, {
            [sty.linkexpand__kVWuzQrxaM]: hasVariant(
              $state,
              "expand",
              "expand"
            ),
            [sty.linkonSubSite_personen__kVWuzuVgFv]: hasVariant(
              $state,
              "onSubSite",
              "personen"
            ),
            [sty.linkonSubSite_projekte__kVWuzJBaP]: hasVariant(
              $state,
              "onSubSite",
              "projekte"
            ),
            [sty.linkonSubSite_projekte_onSubSite_personen__kVWuzJBaPUVgFv]:
              hasVariant($state, "onSubSite", "projekte") &&
              hasVariant($state, "onSubSite", "personen"),
            [sty.linkonSubSite_projekte_onSubSite_services__kVWuzJBaPPxlp4]:
              hasVariant($state, "onSubSite", "services") &&
              hasVariant($state, "onSubSite", "projekte"),
            [sty.linkonSubSite_services__kVWuzPxlp4]: hasVariant(
              $state,
              "onSubSite",
              "services"
            ),
            [sty.linkonSubSite_services_expand__kVWuzPxlp4QrxaM]:
              hasVariant($state, "expand", "expand") &&
              hasVariant($state, "onSubSite", "services")
          })}
          component={Link}
          onClick={async event => {
            const $steps = {};

            $steps["updateExpand"] = true
              ? (() => {
                  const actionArgs = { vgroup: "expand", operation: 2 };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    const oldValue = p.get($state, vgroup);
                    p.set($state, vgroup, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateExpand"] != null &&
              typeof $steps["updateExpand"] === "object" &&
              typeof $steps["updateExpand"].then === "function"
            ) {
              $steps["updateExpand"] = await $steps["updateExpand"];
            }

            $steps["goToProjekte"] = true
              ? (() => {
                  const actionArgs = { destination: `/projekte` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToProjekte"] != null &&
              typeof $steps["goToProjekte"] === "object" &&
              typeof $steps["goToProjekte"].then === "function"
            ) {
              $steps["goToProjekte"] = await $steps["goToProjekte"];
            }
          }}
          platform={"nextjs"}
        >
          <MenuButton
            data-plasmic-name={"projekte"}
            data-plasmic-override={overrides.projekte}
            className={classNames("__wab_instance", sty.projekte, {
              [sty.projekteexpand]: hasVariant($state, "expand", "expand"),
              [sty.projekteonSubSite_personen]: hasVariant(
                $state,
                "onSubSite",
                "personen"
              ),
              [sty.projekteonSubSite_projekte]: hasVariant(
                $state,
                "onSubSite",
                "projekte"
              ),
              [sty.projekteonSubSite_services]: hasVariant(
                $state,
                "onSubSite",
                "services"
              )
            })}
          >
            {"Projekte"}
          </MenuButton>
        </p.PlasmicLink>
        <p.PlasmicLink
          className={classNames(projectcss.all, projectcss.a, sty.link__vmzEf, {
            [sty.linkexpand__vmzEfQrxaM]: hasVariant(
              $state,
              "expand",
              "expand"
            ),
            [sty.linkonSubSite_personen__vmzEFuVgFv]: hasVariant(
              $state,
              "onSubSite",
              "personen"
            ),
            [sty.linkonSubSite_projekte__vmzEfjBaP]: hasVariant(
              $state,
              "onSubSite",
              "projekte"
            ),
            [sty.linkonSubSite_projekte_onSubSite_personen__vmzEfjBaPUVgFv]:
              hasVariant($state, "onSubSite", "projekte") &&
              hasVariant($state, "onSubSite", "personen"),
            [sty.linkonSubSite_services__vmzEfPxlp4]: hasVariant(
              $state,
              "onSubSite",
              "services"
            )
          })}
          component={Link}
          onClick={async event => {
            const $steps = {};

            $steps["updateExpand"] = true
              ? (() => {
                  const actionArgs = { vgroup: "expand", operation: 2 };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    const oldValue = p.get($state, vgroup);
                    p.set($state, vgroup, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateExpand"] != null &&
              typeof $steps["updateExpand"] === "object" &&
              typeof $steps["updateExpand"].then === "function"
            ) {
              $steps["updateExpand"] = await $steps["updateExpand"];
            }

            $steps["goToPersonen"] = true
              ? (() => {
                  const actionArgs = { destination: `/personen` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToPersonen"] != null &&
              typeof $steps["goToPersonen"] === "object" &&
              typeof $steps["goToPersonen"].then === "function"
            ) {
              $steps["goToPersonen"] = await $steps["goToPersonen"];
            }
          }}
          platform={"nextjs"}
        >
          <MenuButton
            data-plasmic-name={"personen"}
            data-plasmic-override={overrides.personen}
            className={classNames("__wab_instance", sty.personen, {
              [sty.personenexpand]: hasVariant($state, "expand", "expand"),
              [sty.personenonSubSite_personen]: hasVariant(
                $state,
                "onSubSite",
                "personen"
              ),
              [sty.personenonSubSite_projekte]: hasVariant(
                $state,
                "onSubSite",
                "projekte"
              ),
              [sty.personenonSubSite_projekte_onSubSite_personen]:
                hasVariant($state, "onSubSite", "projekte") &&
                hasVariant($state, "onSubSite", "personen"),
              [sty.personenonSubSite_services]: hasVariant(
                $state,
                "onSubSite",
                "services"
              )
            })}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text,
                {
                  [sty.textexpand]: hasVariant($state, "expand", "expand"),
                  [sty.textonSubSite_personen]: hasVariant(
                    $state,
                    "onSubSite",
                    "personen"
                  ),
                  [sty.textonSubSite_projekte_onSubSite_personen]:
                    hasVariant($state, "onSubSite", "personen") &&
                    hasVariant($state, "onSubSite", "projekte")
                }
              )}
            >
              {"Personen"}
            </div>
          </MenuButton>
        </p.PlasmicLink>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__xXkFc, {
          [sty.freeBoxexpand__xXkFcQrxaM]: hasVariant(
            $state,
            "expand",
            "expand"
          ),
          [sty.freeBoxonSubSite_personen__xXkFcuVgFv]: hasVariant(
            $state,
            "onSubSite",
            "personen"
          ),
          [sty.freeBoxonSubSite_projekte__xXkFcJBaP]: hasVariant(
            $state,
            "onSubSite",
            "projekte"
          ),
          [sty.freeBoxonSubSite_services__xXkFcPxlp4]: hasVariant(
            $state,
            "onSubSite",
            "services"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__pJ4Tc, {
            [sty.freeBoxexpand__pJ4TcQrxaM]: hasVariant(
              $state,
              "expand",
              "expand"
            ),
            [sty.freeBoxonSubSite_personen__pJ4TcuVgFv]: hasVariant(
              $state,
              "onSubSite",
              "personen"
            ),
            [sty.freeBoxonSubSite_projekte__pJ4TcJBaP]: hasVariant(
              $state,
              "onSubSite",
              "projekte"
            ),
            [sty.freeBoxonSubSite_services__pJ4TcPxlp4]: hasVariant(
              $state,
              "onSubSite",
              "services"
            ),
            [sty.freeBoxonSubSite_services_expand__pJ4TcPxlp4QrxaM]:
              hasVariant($state, "expand", "expand") &&
              hasVariant($state, "onSubSite", "services")
          })}
          onClick={async event => {
            const $steps = {};

            $steps["updateServicesVariant"] = true
              ? (() => {
                  const actionArgs = { vgroup: "expand", operation: 2 };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    const oldValue = p.get($state, vgroup);
                    p.set($state, vgroup, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateServicesVariant"] != null &&
              typeof $steps["updateServicesVariant"] === "object" &&
              typeof $steps["updateServicesVariant"].then === "function"
            ) {
              $steps["updateServicesVariant"] = await $steps[
                "updateServicesVariant"
              ];
            }
          }}
        >
          <p.PlasmicIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            PlasmicIconType={
              hasVariant($state, "expand", "expand")
                ? LineXlSvgrepoComsvgIcon
                : Menu1SvgrepoComsvgIcon
            }
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgexpand]: hasVariant($state, "expand", "expand"),
              [sty.svgonSubSite_personen]: hasVariant(
                $state,
                "onSubSite",
                "personen"
              )
            })}
            role={"img"}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "start", "services", "projekte", "personen", "text", "svg"],
  start: ["start"],
  services: ["services"],
  projekte: ["projekte"],
  personen: ["personen", "text"],
  text: ["text"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  start: typeof MenuButton;
  services: typeof MenuButton;
  projekte: typeof MenuButton;
  personen: typeof MenuButton;
  text: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenu__VariantsArgs;
    args?: PlasmicMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMenu__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenu__ArgProps,
          internalVariantPropNames: PlasmicMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenu";
  } else {
    func.displayName = `PlasmicMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicMenu = Object.assign(
  // Top-level PlasmicMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    start: makeNodeComponent("start"),
    services: makeNodeComponent("services"),
    projekte: makeNodeComponent("projekte"),
    personen: makeNodeComponent("personen"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicMenu
    internalVariantProps: PlasmicMenu__VariantProps,
    internalArgProps: PlasmicMenu__ArgProps
  }
);

export default PlasmicMenu;
/* prettier-ignore-end */
